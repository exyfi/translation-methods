shiftRight


shiftRight [returns v : int]
            = addOrSub shiftRightPrime({addOrSub.v}) {&v = shiftRightPrime.v;}
            ;

shiftRightPrime(left : int) [returns v : int]
            = SHIFTRIGHT shiftRight {&v = (int) left >> shiftRight.v;}
            | {&v = left;}
            ;

addOrSub [returns v : int, isZero : boolean]
            = mulOrDiv addOrSubPrime({mulOrDiv.v})
              {&v = addOrSubPrime.v;}
              {&isZero = &v == 0;}
            ;

addOrSubPrime(left : int) [returns v : int]
            = ADD mulOrDiv    {int next = left + mulOrDiv.v;}
              addOrSubPrime(next) {&v = addOrSubPrime.v;}
            | SUB mulOrDiv    {int next = left - mulOrDiv.v;}
              addOrSubPrime(next) {&v = addOrSubPrime.v;}
            | {&v = left;}
            ;

mulOrDiv [returns v : int] = unary mulOrDivPrime({unary.v}) {&v = mulOrDivPrime.v;};

mulOrDivPrime(left : int) [returns v : int]
            = MUL unary mulOrDivPrime({left * unary.v}) {&v = mulOrDivPrime.v;}
            | DIV unary mulOrDivPrime({left / unary.v}) {&v = mulOrDivPrime.v;}
            | {&v = left;}
            ;

unary [returns v : int]
            = OP shiftRight CP {&v = shiftRight.v;}
            | NUM          {&v = Integer.valueOf(NUM);}
            | SUB NUM {&v = -Integer.valueOf(NUM);}
            ;

ADD = "+";
SUB = "-";
MUL = "*";
DIV = "/";
POW = "^";
OP = "(";
CP = ")";
SHIFTRIGHT = ">>";
NUM : "([1-9][0-9]*)|(0)";
WS -> "[ \n\r\t]+";